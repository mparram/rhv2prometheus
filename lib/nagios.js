var fs = require('fs');
var path = require('path');
const io = require('../websocket').getio();
const request = require('request');
const nspProm2Nagios = io.of('/prom2nagios');

nspProm2Nagios.on('connection', function(socket){
    var templates = {};
    console.log('a user connected /prom2nagios');
    fs.readFile("nagios_templates/prometheus_servers.cfg", "utf8", (err1, prometheus_servers) => {
        if (err1) throw err;
        fs.readFile("nagios_templates/host_template.cfg", "utf8", (err2, host_template) => {
            if (err2) throw err;
            fs.readFile("nagios_templates/service_template.cfg", "utf8", (err3, service_template) => {
                if (err3) throw err;
                fs.readFile("nagios_templates/pre_template.cfg", "utf8", (err4, pre_template) => {
                    if (err4) throw err;
                    templates["prometheus_servers"] = prometheus_servers;
                    templates["pre_template"] = pre_template;
                    templates["host_template"] = host_template;
                    templates["service_template"] = service_template;
                    nspProm2Nagios.emit("promTemplates", templates);
                });
            });
        });
    });

    socket.on('getPrometheusMetrics', function(data){
        var serversArr = data["prometheus_servers"].split("\n");
        for(i=0;i<serversArr.length;i++)
        {
            getPrometheusMetrics(serversArr[i], socket);
        }
    });

    socket.on('sendTemplates', function(data){
        var timeFile = new Date()/1000 |0;
        var newFile = true;
        var templatesToFiles = {};
        var currentNagiosHost = "";
        fs.readFile("nagios_templates/host_template.cfg", "utf8", (err2, host_template) => {
            if (err2) throw err;
            fs.readFile("nagios_templates/service_template.cfg", "utf8", (err3, service_template) => {
                if (err3) throw err;
                fs.readFile("nagios_templates/pre_template.cfg", "utf8", (err4, pre_template) => {
                    if (err4) throw err;
                    
                    templatesToFiles["pre_template"] = pre_template;
                    templatesToFiles["host_template"] = host_template;
                    templatesToFiles["service_template"] = service_template;
                    
                    for(i=0;i<data.length;i++)
                    {
                        var splitValue = data[i].value.split("|");
                        var serverUrl = splitValue[0];
                        var serverAlias = splitValue[1];
                        if (!fs.existsSync('nagios_cfg/' + serverAlias + '_' + timeFile + '.cfg')){
                            fs.writeFileSync('nagios_cfg/' + serverAlias + '_' + timeFile + '.cfg', '# Autogenerated Nagios CFG from Prometheus metrics\n');
                            fs.appendFileSync('nagios_cfg/' + serverAlias + '_' + timeFile + '.cfg', '\n');
                            fs.appendFileSync('nagios_cfg/' + serverAlias + '_' + timeFile + '.cfg', templatesToFiles["pre_template"] + '\n');
                            fs.appendFileSync('nagios_cfg/' + serverAlias + '_' + timeFile + '.cfg', templatesToFiles["host_template"] + '\n');
                            fs.appendFileSync('nagios_cfg/' + serverAlias + '_' + timeFile + '.cfg', templatesToFiles["service_template"] + '\n');
                            newFile = serverAlias + '_' + timeFile + '.cfg';
                        }
                        var metricID = "'" + splitValue[2].replace(/'/g, "\"") + "'";
                        var metricAttrs = data[i].text.split("|");
                        var nagiosService = `
define service{
    host_name				<hostname>
    service_description		<serviceDESC>
    use 					prometheusServiceTemplate
    check_command			check_prometheus_metric!'<serverUrl>'!<metricID>
}`;
                        nagiosService = nagiosService.replace(/<hostname>/g, metricAttrs[0]).replace(/<serviceDESC>/g, metricAttrs[1]).replace(/<metricID>/g,  metricID).replace(/<serverUrl>/g, serverUrl);
                        
                        if (metricAttrs[0] !== currentNagiosHost){
                            currentNagiosHost = metricAttrs[0];
                            var nagiosHost = `
define host{
    host_name				<hostname>
    address         		<address>
    use 					prometheusHostTemplate
}`;
                            var address = serverUrl;
                            if(serverUrl.includes("//")){
                                var addressArr = address.split("//");
                                address = addressArr[1];
                            }
                            if(serverUrl.includes(":")){
                                var addressArr = address.split(":");
                                address = addressArr[0];
                            }                            
                            nagiosHost = nagiosHost.replace(/<hostname>/g, metricAttrs[0]).replace(/<address>/g, address);
                            fs.appendFileSync('nagios_cfg/' + serverAlias + '_' + timeFile + '.cfg', nagiosHost + '\n');
                        }

                        fs.appendFileSync('nagios_cfg/' + serverAlias + '_' + timeFile + '.cfg', nagiosService + '\n');
                        if (newFile == serverAlias + '_' + timeFile + '.cfg'){
                            socket.emit('templateFiles',serverAlias + '_' + timeFile + '.cfg');
                            newFile = false;
                        }
                    }
                });
            });
        });


        
    });
});

function getPrometheusMetrics(serversArr, socket){
    var metricsToPush = [];
    var serverAlias = [];
    var serverUrl = [];
    serverAlias = [];
    if (!fs.existsSync("nagios_cfg")){
        fs.mkdirSync("nagios_cfg");
    }
    if(serversArr.includes("="))
    {
        var splitServer =serversArr.split("=");
        var serverAlias = splitServer[0];
        serverUrl = splitServer[1];
    }else{
        serverUrl = serversArr;
        var splitServer =serversArr.split("//");
        var splitServer2 =splitServer[1].split("/");
        var splitServer3 =splitServer2[0].split(":");
        serverAlias = splitServer3[0].replace(/[^A-Z0-9]/ig, "_");
    }
    serverProtocolArr =  serverUrl.split(":");
    request({uri: serverUrl + '/metrics', strictSSL: false}, function(err, response, body){
        if (err){
            console.error('error:', err); 
        }else{
            var bodyArr = body.split('\n');
            for (x = 0; x < bodyArr.length; x++){
                if ((bodyArr[x][0] != "#") && (bodyArr[x][0])){
                    bodyArr[x] = bodyArr[x].substring(0, bodyArr[x].indexOf(" "));
                    var metricToPush = [];                    
                    metricToPush.push(bodyArr[x].replace(/"/g,"'"));
                    if (bodyArr[x].search("ovirt_engine_api_") >= 0){
                        var tempHost = bodyArr[x].substring(17);
                        var indexOfHostEnd = tempHost.indexOf("_", tempHost.indexOf("_") + 1 );
                        var nagiosHost = serverAlias +  "_"  + bodyArr[x].substring(17,indexOfHostEnd + 17);
                        var nagiosService = bodyArr[x].substring(indexOfHostEnd + 18).replace(/[^A-Z0-9]/ig, "_").replace(/__/g, "_").replace(/_\s*$/,"");
                        metricToPush.push(nagiosHost);
                        metricToPush.push(nagiosService);
                        metricToPush.push(serverAlias);
                        metricToPush.push(serverUrl);
                    }else{
                        var nagiosHost = serverAlias;
                        var nagiosService = bodyArr[x].replace(/[^A-Z0-9]/ig, "_").replace(/__/g, "_").replace(/_\s*$/,"");
                        metricToPush.push(nagiosHost);
                        metricToPush.push(nagiosService);
                        metricToPush.push(serverAlias);
                    }
                    metricsToPush.push(metricToPush);
                }
            }
            socket.emit('metrics',metricsToPush);
        }
    });
}

module.exports = {
    writeHost : function(hostName, hostAddress, hostContactGroups){
        //TODO...
    }
}